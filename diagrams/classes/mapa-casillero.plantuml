@startuml
title Modelado de Mapa con Casillero

class Mapa {
    -int: anchoMapa
    -int: altoMapa
    -List<List<Casillero>>: tableroActual
    -int: tiempoVida

    +<u>Mapa(int:alto, int:ancho)
    +void: cambiarTipoCasilla(int: x, int: y, TipoCasillero: tipo)
    +List<Casillero>: casillerosAdyacentes(int:x, int:y)
    +List<Casillero>: casillerosEnRango(int:xInicial, int:yInicial, int:rango)
    +List<List<Integer>>: equidistantesPares(int cantidad)
    +boolean: enRango(int:x, int:y)
    +void: pasarTurno()
    +void: energizar(int:x,int:y,int:rango)
    +void: desenergizar(int:x,int:y,int:rango)
    +Casillero: obtenerCasillero(int:x, int:y)
}


class Casillero {
 - int: energia
 - int: coordenadaX
 - int: coordenadaY
 - boolean: estaOcupado
 - boolean: quitarInvisibilidad
 - int: turno

 + <u>Casillero(coordX, coordY)
 + void: setTipoCasillero(TipoCasillero: unTipoDeCasilleroNuevo)
 + boolean: tieneEnergia()
 + void: energizar()
 + void: desenergizar()
 + boolean: casilleroQuitaInvisibilidad()
 + void: quitarInvisibilidadEnRango()
 + void: pasarTurno(int: turnoActual)
 + int: extraerMineral(int: cant)
 + int: extraerGas(int: cant)
 + void: volverseMoho()
 + void: ocupar()
 + void: desocupar()
 + List<Casillero>: visitarAdyacentes(int turnoActual, Mapa mapa)
 + boolean: tieneEnRango(Unidad unidadAAtacar, int rango)
}



@enduml