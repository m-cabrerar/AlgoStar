@startuml
title Modelado de los Edificios

interface Unidad {
 + void:pasarTurno()
 + void:recibirDanio(int cantidad)
}


interface Construibles {
+int turnosParaConstruir()
}
abstract class  EdificioConcreto{
# Vida: vida
# Casillero: casillero
# int: turnosParaConstruir
 -Inventario: inventario

+<u>EdificioConcreto(Casillero unCasillero, Inventario unInventario)
+ void: pasarTurno();
+ void: recibirDanio(Danio danio)
+ boolean: unidadEnConstruccion()
+ boolean: unidadEstaLista()
+  UnidadMovil: obtenerUnidad()
+ boolean: estaPorAca(List<Casillero> casilleros)
+ UnidadMovil: crearEvolucion(Inventario inventario)
+ Integer[]: obtenerPosicion()
+ {abstract} void ubicarEnInventario()
}



class EdificioEnConstruccion{
 /'- Unidad:vaASer'/
 - Casillero:casillero
 - int:turnosRestantes
 - boolean:destruido
 -Inventario: inventario
 -boolean: enInventario

 + <u>EdificioEnConstruccion(EdificioConcreto vaASer, Casillero casillero,Inventario inventario)
 - boolean:estaListo()
 + void:pasarTurno()
 + void:recibirDanio(Danio danio)
 + boolean: estaPorAca(List<Casillero> casilleros)
 +Integer[]: obtenerPosicion()
}

class EdificioZerg{
 + EdificioZerg(TipoCasillero casillero, Inventario inventario, int vida_)
 + void:pasarTurno()
}

class EdificioProtoss{
 + <u>EdificioProtoss(Casillero casillero, Inventario inventario, int vidaInicial, int escudoInicial)
 + void:pasarTurno()
}

abstract class Vida{
#int:vida

+<u>Vida(int vida)
+void: chequeoDeVida()
+boolean: quedaVida()
}
class VidaZerg{
-int:vidaMaxima

+<u> VidaZerg(int cantidadVida)
+ void: sufrirAtaque(int danio)
+ void: regenerar()
+ void: pasarTurno()
}

class VidaProtoss{
-Escudo: escudo

+<u> VidaProtoss(int vida, int escudo)
+ void: sufrirAtaque(int danio)
+ void: pasarTurno()

}


interface Regenerativo{
+void: regenerar()
}

class Escudo{
-int escudo
-int escudoMaximo

+<u>Escudo(int escudo)
+ void regenerar()
+ void sufrirAtaque(int danio)
+ void chequeoDeEscudo()
+ boolean quedaEscudo()
}

interface Superficie{
+ int danio(Danio danio)
+ boolean puedeVolar()
}
class Tierra{
 int danio(Danio danio)
 boolean puedeVolar()
}
class Aire{
int danio(Danio danio)
boolean puedeVolar()
}


class ModificablePorTurno{
+void: pasarTurno()
}


class UnidadMovil{}

Superficie <|.. Tierra
Superficie <|.. Aire


Vida <|-- VidaProtoss
Vida <|-- VidaZerg
Regenerativo <|.. VidaZerg
Atacable <|.. Vida
ModificablePorTurno <|.. Vida

VidaProtoss *-- "0..1"Escudo
Regenerativo <|.. Escudo
Atacable <|.. Escudo

EdificioProtoss "1" *-- "1"Vida
EdificioZerg "1"*-- "1"Vida

Construibles <|.. EdificioConcreto
Unidad <|.. EdificioConcreto
Unidad <|.. EdificioEnConstruccion
EdificioConcreto <|-- EdificioZerg
EdificioConcreto <|-- EdificioProtoss
EdificioConcreto *-- Superficie
EdificioConcreto *-- "0..1"UnidadMovil
EdificioEnConstruccion "1" o-- "1" EdificioConcreto
@enduml