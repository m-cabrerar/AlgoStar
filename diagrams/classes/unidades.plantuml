@startuml
title Modelado de Unidades Moviles
interface Superficie{}

interface Construible {
+int: turnosParaConstruir()
}

abstract class  UnidadMovil {
 - Casillero: casilleroActual
 - Inventario: inventario

 +<u>UnidadMovil(inventario, costoMineral, costoGas,int costoSuministro)
 +void: ubicarEn(Casillero casillero)
 + boolean: tieneEnRangoA(Unidad unidadAAtacar, int rango)
 +boolean: estaPorAca(List<Casillero> casilleros)
 +boolean: esVoladora()
 +void: recibirDanio(Danio danio)
 +void. atacar(Unidad unidadAAtacar, int rango, Danio danio)
 +Integer[]: obtenerPosicion()
}

abstract class UnidadMovilProtoss {
 + <u> UnidadMovilProtoss(inv,costoM,costoG,vida,escudo,suministro)
 + void: pasarTurno()
}

abstract class UnidadMovilZerg{
 + <u>UnidadMovilZerg(inv,costoM,costoG,,suministro)
 + void: pasarTurno()
}

interface Unidad {
 + void:pasarTurno()
 + void:recibirDanio(int cantidad)
 +boolean: estaPorAca(List<Casillero> casilleros)
 +Integer[]: obtenerPosicion()
}

abstract class Vida{

}

Unidad <|.. UnidadMovil

Construible <|.. UnidadMovil

UnidadMovil <|-- UnidadMovilProtoss
UnidadMovil <|-- UnidadMovilZerg



UnidadMovil *-- Superficie


UnidadMovil *-- "1"Vida



@enduml