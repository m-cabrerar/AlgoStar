@startuml
title Modelado General
class Inventario {
-int cantidadGas
-int cantidadMineral
-List<UnidadMovil>UnidadesMoviles
-List<Edificios>Edificios
-<u>int PoblacionMaxima
-<u>int SuministrosMaximos
-int suministrosDisponibles
-int suministrosEmpleados
-int nivelConstruccion

+<u>void: Inventario()
+boolean: puedeConstruir(int nivelDificultadConstruccion)
+void: subirNivelConstruccion(int nivelOtorga)
+void: agregarGas(int i)
+void: agregarMineral(int i)
+boolean: tieneRecursos(int cantidadGas, int cantidadMineral)
+void: pagarMateriales(int cantidadGas, int cantidadMineral)
+void: agregar(UnidadMovil unidad)
+void: agregar(Edificio edificio)
+void: agregarSuministro(int cantidad)
+void: perderSuministro(int cantidad)
+void: suministrarUnidad((int cantidad)
+boolean: tieneSuministros(int cantidad)
+boolean: puedeCrecerPoblacion(int cantidad)
+boolean: tieneEdificios()
+void: pasarTurno()
}

class Mapa {
    -int:anchoMapa
    -int:altoMapa
    -List<List<Casillero>>: tableroActual
    -int: tiempoVida

    +<u>Mapa(int:alto, int:ancho)
    +void: cambiarTipoCasilla(int: x, int: y, TipoCasillero: tipo)
    +List<Casillero>: casillerosAdyacentes(int:x, int:y)
    +List<Casillero>: casillerosEnRango(int:xInicial, int:yInicial, int:rango)
    +List<List<Integer>> equidistantesPares(int cantidad)
    +boolean: enRango(int:x, int:y)
    +void: pasarTurno()
    +void: energizar(int:x,int:y,int:rango)
    +void: desenergizar(int:x,int:y,int:rango)
    +Casillero: obtenerCasillero(int:x, int:y)
}

class Casillero {
 /'- TipoCasillero: tipoCasillero'/
- int: energia
 - int: coordenadaX
 - int: coordenadaY
 - boolean: estaOcupado
 - boolean: quitarInvisibilidad
 - int: turno

 + <u>Casillero(coordX, coordY)
 + void: setTipoCasillero(TipoCasillero: unTipoDeCasilleroNuevo)
 + boolean: tieneEnergia()
 + void: energizar()
 + void: desenergizar()
 + boolean: casilleroQuitaInvisibilidad()
 + void: quitarInvisibilidad()
 + void: quitarInvisibilidadEnRango()
 + void: pasarTurno(int: turnoActual)
 + int: extraerMineral(int: cant)
 + int: extraerGas(int: cant)
 + boolean: estaOcupado()
 + void: ocupar()
 + void: desocupar()
 + List<Casillero>: visitarAdyacentes(int turnoActual, Mapa mapa)
 + int: posicionX()
 + int: posicionY()
}

class TipoCasillero{
 + int: extraerMineral(int:cantidad)
 + int: extraerGas(int cantidad)
 + void: expandirMoho(List<Casillero> casillasAContagiar)
 + void: ocupar()
}

interface Unidad {
 + void:pasarTurno()
 + void:recibirDanio(int cantidad)
}

class EdificioConcreto {
 # int:vida
 /'# Casillero:casillero'/
 + EdificioConcreto(unCasillero, unInventario, vidaInicial)
 # boolean:estaDestruido()
 + void:recibirDanio(int cantidad)
 - void:consumirMateriales(inventario)
 - boolean:tieneCorrelativas(inventario)
 - boolean:tieneMateriales(inventario)
 {abstract} int:turnosParaConstruir()
}

class EdificioEnConstruccion{
 /'- Unidad:vaASer'/
 /'- Casillero:casillero'/
 - int:turnosRestantes
 + EdificioEnConstruccion(EdificioConcreto vaASer, casillero, inventario)
 + void:pasarTurno()
 + void:recibirDanio(Danio danio)
}

class EdificioZerg{
 - int:vidaMaxima
 + EdificioZerg(TipoCasillero casillero, Inventario inventario, int vida_)
 + void:recibirDanio(Danio danio)
 + void:pasarTurno()
}

class EdificioProtoss{
 - int:escudo
 - int:escudoMaximo
 + EdificioProtoss(Casillero casillero, Inventario inventario, int vidaInicial, int escudoInicial)
 + void:recibirDanio(Danio danio)
 + void:pasarTurno()
}


class UnidadMovil {
 - Casillero: casilleroActual
 UnidadMovil(inventario, costoMineral, costoGas)
 {sbstract} void: atacar(Unidad unidad)
}

class UnidadMovilProtoss {
 - int: escucoMaximo
 - int: escudo
 - int: vida
 + UnidadMovilProtoss(inventario,costoM,costoG,vida,escudo)
 + void: pasarTurno()
 {abstract}void: atacar(Unidad unidad)
}

class UnidadMovilZerg{
 - int: vidaMaxima
 - int: vida
 + UnidadMovilZerg(inventario,costoM,costoG,vida)
 + void: pasarTurno()
 {abstract}void: atacar(Unidad unidad)
}

class Jugador {
    -String: nombre
    -String: raza
    -Inventario: inventario

    +<u>Jugador()
    +void: setDatos(String nombre, String color, String raza)
    +boolean: nombreValido(String nombre, Jugador[] jugadores)
    +boolean: colorValido(String color, Jugador[] jugadores)
    +boolean: razaValida(String raza, Jugador[] jugadores)
    +boolean: tieneEdificios()

}

class Juego {
- Mapa: mapa
- <u> int: cantidadJugadores
- Jugador[]: cantidadJugadores
- int: cantidadJugadores
- int: turnos

+<u> Juego()
+ void: registrarJugador(String nombre, String color, String raza, String jugador)
+ void: crearTerreno()
+ void: crearBases(int cantBasesPares)
+ void: pasarTurno()
+ String: verificarGanador()
+ int: cantidadDeJugadores()
+ int: cantidadJugadoresMaxima()
}


Unidad <|.. EdificioConcreto
Unidad <|.. EdificioEnConstruccion
EdificioConcreto <|-- EdificioZerg
EdificioConcreto <|-- EdificioProtoss
EdificioEnConstruccion "1" o-- "1" EdificioConcreto
EdificioEnConstruccion "1" o-- "1" Casillero

Juego "1" *-- "2" Jugador
Jugador "1" *-- "1"Inventario
Mapa "1" <-- "1" Casillero
Casillero "*" <-- "1" Mapa
Casillero "1" *-- "1" TipoCasillero

Inventario "1" o-- "*" Unidad
Unidad <|.. UnidadMovil
UnidadMovil <|-- UnidadMovilProtoss
UnidadMovil <|-- UnidadMovilZerg
@enduml